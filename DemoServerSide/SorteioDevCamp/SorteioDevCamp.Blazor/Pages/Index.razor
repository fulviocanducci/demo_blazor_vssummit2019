@page "/"

<h1>Sorteio DevCamp</h1>

<p>Você que assistiu minha talk sobre Blazor no VSSummit 2019, inscreva-se para ganhar 1 de 2 ingressos para o DevCamp 2019.
    <br/>
    Informe um e-mail válido para que eu possa entrar em contato com você após o sorteio, que realizarei na segunda-feira, dia 24/06/2019.</p>

<EditForm Model="@model" OnValidSubmit="@SaveRegistration">
    <h1 style="color: blue">@replyMessage</h1>
    <div class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>
    <div class="form-group">
        <label for="Name" class="control-label">Nome Completo</label>
        <InputText id="Name" class="form-control" @bind-Value="@model.Name" />
    </div>
    <div class="form-group">
        <label for="Email" class="control-label">Email</label>
        <InputText id="Email" class="form-control" @bind-Value="@model.Email" />
    </div>
    <div class="form-group">
        <label for="Company" class="control-label">Empresa</label>
        <InputText id="Company" class="form-control" @bind-Value="@model.Company" />
    </div>
    <div class="form-group">
        <label for="Role" class="control-label">Cargo</label>
        <InputText for="Role" class="form-control" @bind-Value="@model.Role" />
    </div>
    <div class="form-group">
        <button type="submit">Enviar</button>
    </div>
</EditForm>

@functions {
    private RegisterModel model = new RegisterModel();

    string replyMessage;

    public async Task SaveRegistration()
    {
        var channel = new Channel("localhost:50051", ChannelCredentials.Insecure);
        var client = new Register.RegisterClient(channel);

        var reply = await client.StoreAsync(new RegisterRequest() { Name = model.Name, Email = model.Email, Company = model.Company, Role = model.Role });

        replyMessage = reply.Message;

        await channel.ShutdownAsync();
    }
}
